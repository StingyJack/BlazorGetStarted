//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NetFxTestConsole.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IAuthService")]
    public interface IAuthService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthService/AttemptUserAuth", ReplyAction="http://tempuri.org/IAuthService/AttemptUserAuthResponse")]
        NetFxCommonLib.AuthResult AttemptUserAuth(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAuthService/AttemptUserAuth", ReplyAction="http://tempuri.org/IAuthService/AttemptUserAuthResponse")]
        System.IAsyncResult BeginAttemptUserAuth(string userName, string password, System.AsyncCallback callback, object asyncState);
        
        NetFxCommonLib.AuthResult EndAttemptUserAuth(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuthServiceChannel : NetFxTestConsole.ServiceReference1.IAuthService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AttemptUserAuthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AttemptUserAuthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NetFxCommonLib.AuthResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NetFxCommonLib.AuthResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthServiceClient : System.ServiceModel.ClientBase<NetFxTestConsole.ServiceReference1.IAuthService>, NetFxTestConsole.ServiceReference1.IAuthService {
        
        private BeginOperationDelegate onBeginAttemptUserAuthDelegate;
        
        private EndOperationDelegate onEndAttemptUserAuthDelegate;
        
        private System.Threading.SendOrPostCallback onAttemptUserAuthCompletedDelegate;
        
        public AuthServiceClient() {
        }
        
        public AuthServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuthServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<AttemptUserAuthCompletedEventArgs> AttemptUserAuthCompleted;
        
        public NetFxCommonLib.AuthResult AttemptUserAuth(string userName, string password) {
            return base.Channel.AttemptUserAuth(userName, password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAttemptUserAuth(string userName, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAttemptUserAuth(userName, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public NetFxCommonLib.AuthResult EndAttemptUserAuth(System.IAsyncResult result) {
            return base.Channel.EndAttemptUserAuth(result);
        }
        
        private System.IAsyncResult OnBeginAttemptUserAuth(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return this.BeginAttemptUserAuth(userName, password, callback, asyncState);
        }
        
        private object[] OnEndAttemptUserAuth(System.IAsyncResult result) {
            NetFxCommonLib.AuthResult retVal = this.EndAttemptUserAuth(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAttemptUserAuthCompleted(object state) {
            if ((this.AttemptUserAuthCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AttemptUserAuthCompleted(this, new AttemptUserAuthCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AttemptUserAuthAsync(string userName, string password) {
            this.AttemptUserAuthAsync(userName, password, null);
        }
        
        public void AttemptUserAuthAsync(string userName, string password, object userState) {
            if ((this.onBeginAttemptUserAuthDelegate == null)) {
                this.onBeginAttemptUserAuthDelegate = new BeginOperationDelegate(this.OnBeginAttemptUserAuth);
            }
            if ((this.onEndAttemptUserAuthDelegate == null)) {
                this.onEndAttemptUserAuthDelegate = new EndOperationDelegate(this.OnEndAttemptUserAuth);
            }
            if ((this.onAttemptUserAuthCompletedDelegate == null)) {
                this.onAttemptUserAuthCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAttemptUserAuthCompleted);
            }
            base.InvokeAsync(this.onBeginAttemptUserAuthDelegate, new object[] {
                        userName,
                        password}, this.onEndAttemptUserAuthDelegate, this.onAttemptUserAuthCompletedDelegate, userState);
        }
    }
}
