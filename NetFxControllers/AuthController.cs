namespace NetFxControllers
{
    using System;
    using System.Diagnostics;
    using System.ServiceModel;
    using System.ServiceModel.Channels;
    using NetFxCommonLib;


    public class AuthController
    {
        public AuthResult AttemptUserAuth(string userName, string password)
        {
            try
            {
                var binding = new BasicHttpBinding();
                var endpointAddress = new EndpointAddress("http://localhost:62433/AuthService.svc");
                using (var svc = new AuthServiceClientBase(binding, endpointAddress))
                {
                    return svc.AttemptUserAuth(userName, password);
                }
            }
            catch (Exception e)
            {
                Debug.WriteLine($"Error during service call for auth: {e}");
                return new AuthResult { IsAuthed = false, ErrorMessage = e.ToString() };
            }
        }
    }

    //    #region "generated code from adding a service reference"

    //    //------------------------------------------------------------------------------
    //    // <auto-generated>
    //    //     This code was generated by a tool.
    //    //     Runtime Version:4.0.30319.42000
    //    //
    //    //     Changes to this file may cause incorrect behavior and will be lost if
    //    //     the code is regenerated.
    //    // </auto-generated>
    //    //------------------------------------------------------------------------------

    //    namespace NetFxTestConsole.ServiceReference1
    //    {
    //        using System;
    //        using System.CodeDom.Compiler;
    //        using System.ComponentModel;
    //        using System.ServiceModel;
    //        using System.ServiceModel.Channels;
    //        using System.Threading;


    //        [GeneratedCode("System.ServiceModel", "4.0.0.0")]
    //        [ServiceContract(ConfigurationName = "ServiceReference1.IAuthService")]
    //        public interface IAuthService
    //        {

    //            [OperationContract(Action = "http://tempuri.org/IAuthService/AttemptUserAuth", ReplyAction = "http://tempuri.org/IAuthService/AttemptUserAuthResponse")]
    //            AuthResult AttemptUserAuth(string userName, string password);

    //            [OperationContract(AsyncPattern = true, Action = "http://tempuri.org/IAuthService/AttemptUserAuth",
    //                ReplyAction = "http://tempuri.org/IAuthService/AttemptUserAuthResponse")]
    //            IAsyncResult BeginAttemptUserAuth(string userName, string password, AsyncCallback callback, object asyncState);

    //            AuthResult EndAttemptUserAuth(IAsyncResult result);
    //        }

    //        [GeneratedCode("System.ServiceModel", "4.0.0.0")]
    //        public interface IAuthServiceChannel : IAuthService, IClientChannel
    //        {
    //        }

    //        [DebuggerStepThrough]
    //        [GeneratedCode("System.ServiceModel", "4.0.0.0")]
    //        public class AttemptUserAuthCompletedEventArgs : AsyncCompletedEventArgs
    //        {

    //            private readonly object[] _results;

    //            public AttemptUserAuthCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
    //                base(exception, cancelled, userState)
    //            {
    //                _results = results;
    //            }

    //            public AuthResult Result
    //            {
    //                get
    //                {
    //                    RaiseExceptionIfNecessary();
    //                    return ((AuthResult)(_results[0]));
    //                }
    //            }
    //        }

    //        [DebuggerStepThrough]
    //        [GeneratedCode("System.ServiceModel", "4.0.0.0")]
    //        public class AuthServiceClient : ClientBase<IAuthService>, IAuthService
    //        {

    //            private BeginOperationDelegate _onBeginAttemptUserAuthDelegate;

    //            private EndOperationDelegate _onEndAttemptUserAuthDelegate;

    //            private SendOrPostCallback _onAttemptUserAuthCompletedDelegate;

    //            public AuthServiceClient()
    //            {
    //            }

    //            public AuthServiceClient(string endpointConfigurationName) :
    //                base(endpointConfigurationName)
    //            {
    //            }

    //            public AuthServiceClient(string endpointConfigurationName, string remoteAddress) :
    //                base(endpointConfigurationName, remoteAddress)
    //            {
    //            }

    //            public AuthServiceClient(string endpointConfigurationName, EndpointAddress remoteAddress) :
    //                base(endpointConfigurationName, remoteAddress)
    //            {
    //            }

    //            public AuthServiceClient(Binding binding, EndpointAddress remoteAddress) :
    //                base(binding, remoteAddress)
    //            {
    //            }

    //            public event EventHandler<AttemptUserAuthCompletedEventArgs> AttemptUserAuthCompleted;

    //            public AuthResult AttemptUserAuth(string userName, string password)
    //            {
    //                return Channel.AttemptUserAuth(userName, password);
    //            }

    //            [EditorBrowsable(EditorBrowsableState.Advanced)]
    //            public IAsyncResult BeginAttemptUserAuth(string userName, string password, AsyncCallback callback, object asyncState)
    //            {
    //                return Channel.BeginAttemptUserAuth(userName, password, callback, asyncState);
    //            }

    //            [EditorBrowsable(EditorBrowsableState.Advanced)]
    //            public AuthResult EndAttemptUserAuth(IAsyncResult result)
    //            {
    //                return Channel.EndAttemptUserAuth(result);
    //            }

    //            private IAsyncResult OnBeginAttemptUserAuth(object[] inValues, AsyncCallback callback, object asyncState)
    //            {
    //                string userName = ((string)(inValues[0]));
    //                string password = ((string)(inValues[1]));
    //                return BeginAttemptUserAuth(userName, password, callback, asyncState);
    //            }

    //            private object[] OnEndAttemptUserAuth(IAsyncResult result)
    //            {
    //                AuthResult retVal = EndAttemptUserAuth(result);
    //                return new object[]
    //                {
    //                    retVal
    //                };
    //            }

    //            private void OnAttemptUserAuthCompleted(object state)
    //            {
    //                if ((AttemptUserAuthCompleted != null))
    //                {
    //                    InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
    //                    AttemptUserAuthCompleted(this, new AttemptUserAuthCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
    //                }
    //            }

    //            public void AttemptUserAuthAsync(string userName, string password)
    //            {
    //                AttemptUserAuthAsync(userName, password, null);
    //            }

    //            public void AttemptUserAuthAsync(string userName, string password, object userState)
    //            {
    //                if ((_onBeginAttemptUserAuthDelegate == null))
    //                {
    //                    _onBeginAttemptUserAuthDelegate = OnBeginAttemptUserAuth;
    //                }

    //                if ((_onEndAttemptUserAuthDelegate == null))
    //                {
    //                    _onEndAttemptUserAuthDelegate = OnEndAttemptUserAuth;
    //                }

    //                if ((_onAttemptUserAuthCompletedDelegate == null))
    //                {
    //                    _onAttemptUserAuthCompletedDelegate = OnAttemptUserAuthCompleted;
    //                }

    //                InvokeAsync(_onBeginAttemptUserAuthDelegate, new object[]
    //                {
    //                    userName,
    //                    password
    //                }, _onEndAttemptUserAuthDelegate, _onAttemptUserAuthCompletedDelegate, userState);
    //            }
    //        }
    //    }
    //}

    //#endregion "generated code"

    //    public AuthResult AttemptUserAuthAsync(string userName, string password)
    //    {
    //        try
    //        {
    //            var binding = new BasicHttpBinding();
    //            var endpointAddress = new EndpointAddress("http://localhost:62433/AuthService.svc");
    //            using (var svc = new AuthServiceAsyncClientBase(binding, endpointAddress))
    //            {
    //                //return svc.AttemptUserAuthAsync(userName, password);
    //                var asyncResult = svc.BeginAttemptUserAuth(userName, password, null, new object[] {userName, password});
    //                var authResult = svc.EndAttemptUserAuth(asyncResult);
    //                return authResult;
    //            }
    //        }
    //        catch (Exception e)
    //        {
    //            Debug.WriteLine($"Error during service call for auth: {e}");
    //            //return new AuthResult { IsAuthed = false, ErrorMessage = e.ToString() };
    //            return new AuthResult {IsAuthed = false};
    //        }
    //    }
    //}

    internal class AuthServiceClientBase : ClientBase<IAuthService>, IAuthService
    {
        public AuthServiceClientBase(Binding binding, EndpointAddress endpointAddress) : base(binding, endpointAddress)
        {
        }

        public AuthResult AttemptUserAuth(string userName, string password) => Channel.AttemptUserAuth(userName, password);

        protected override IAuthService CreateChannel()
        {
            return new AuthServiceChannelBase(this);
        }


        private class AuthServiceChannelBase : ChannelBase<IAuthService>, IAuthService
        {
            public AuthServiceChannelBase(ClientBase<IAuthService> client) : base(client)
            {
            }


            public AuthResult AttemptUserAuth(string userName, string password)
            {
                var asyncResult = BeginAttemptUserAuth(userName, password, (ar) => EndAttemptUserAuth(ar), null);
                var authResult = EndAttemptUserAuth(asyncResult);
                return authResult;
                //return authResult;
                //object[] args = new object[2];
                //args[0] = userName;
                //args[1] = password;
                //var asyncResult = BeginInvoke(nameof(AttemptUserAuth), args, null, args);
                //var authResult = EndInvoke(nameof(AttemptUserAuth), args, asyncResult);
                //return authResult as AuthResult;
            }

            private IAsyncResult BeginAttemptUserAuth(string userName, string password, AsyncCallback callback, object asyncState)
            {
                object[] args = new object[2];
                args[0] = userName;
                args[1] = password;
                var asyncResult = BeginInvoke(nameof(AttemptUserAuth), args, null, args);
                return asyncResult;
            }

            private AuthResult EndAttemptUserAuth(IAsyncResult asyncResult)
            {
                var args = new object[1];
                args[0] = asyncResult;
                var authResult = EndInvoke(nameof(AttemptUserAuth), args, asyncResult);
                return (AuthResult) authResult;
            }
        }
    }

//    [ServiceContract(Name = "IAuthService")]
//    internal interface IAuthServiceAsync
//    {
//        [OperationContract(Name = "AttemptUserAuth", AsyncPattern = true)]
//        IAsyncResult BeginAttemptUserAuth(string userName, string password, AsyncCallback asyncCallback, object state);

////[OperationContract(Name = "AttemptUserAuth")]
//        AuthResult EndAttemptUserAuth(IAsyncResult asyncResult);
//    }

//internal class AuthServiceAsyncClientBase : ClientBase<IAuthServiceAsync>, IAuthServiceAsync
//{
//    public AuthServiceAsyncClientBase(Binding binding, EndpointAddress endpointAddress) : base(binding, endpointAddress)
//    {
//    }

//    protected override IAuthServiceAsync CreateChannel()
//    {
//        return new AuthServiceAsyncChannelBase(this);
//    }

//    public IAsyncResult BeginAttemptUserAuth(string userName, string password, AsyncCallback asyncCallback, object state) => Channel.BeginAttemptUserAuth(userName, password, asyncCallback, state);

//    public AuthResult EndAttemptUserAuth(IAsyncResult asyncResult) => Channel.EndAttemptUserAuth(asyncResult);


//    private class AuthServiceAsyncChannelBase : ChannelBase<IAuthServiceAsync>, IAuthServiceAsync
//    {
//        public AuthServiceAsyncChannelBase(ClientBase<IAuthServiceAsync> client) : base(client)
//        {
//        }

//        public IAsyncResult BeginAttemptUserAuth(string userName, string password, AsyncCallback asyncCallback, object state)
//        {
//            var args = new object[2];
//            args[0] = userName;
//            args[1] = password;
//            return BeginInvoke(nameof(BeginAttemptUserAuth), args, ar => EndAttemptUserAuth(ar), args);
//        }

//        public AuthResult EndAttemptUserAuth(IAsyncResult asyncResult)
//        {
//            return (AuthResult) EndInvoke(nameof(EndAttemptUserAuth), (object[]) asyncResult.AsyncState, asyncResult);
//        }
//    }
}
